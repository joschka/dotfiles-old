"
" LINUX & MAC OS
"

" define variable containing current env's name
" source: https://gist.github.com/romainl/4df4cde3498fada91032858d7af213c2
if !exists('g:env')
	if has('win64') || has('win32') || has('win16')
		let g:env = 'WINDOWS'
	else
		let g:env = toupper(substitute(system('uname'), '\n', '', ''))
    " 'LINUX', 'DARWIN', â€¦
	endif
endif

"
" PACKAGE MANAGEMENT
"

" [reminder to myself]
"   - ignore 'E185: Cannot find color scheme' error on very first vimrc run
"   - restart vim after very first vimrc run

" [reminder to myself] run these commands from time to time:
"   :PlugClean (remove unlisted packages)
"   :PlugUpgrade (update package manager itself)
"   :PlugUpdate (update all packages)

" install package manager
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" install missing packages
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

call plug#begin(has('nvim') ? stdpath('data') . '/plugged' : '~/.vim/plugged')

"Plug 'SirVer/ultisnips'
Plug 'airblade/vim-rooter'
Plug 'evanleck/vim-svelte'
Plug 'honza/vim-snippets'
Plug 'jnurmine/Zenburn'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-peekaboo'
Plug 'junegunn/limelight.vim'
Plug 'junegunn/seoul256.vim'
Plug 'junegunn/goyo.vim'
Plug 'lifepillar/vim-solarized8'
Plug 'mattn/emmet-vim'
Plug 'mhinz/vim-startify'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'niftylettuce/vim-jinja'
Plug 'pantharshit00/vim-prisma'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'vim-scripts/YankRing.vim'
Plug 'w0rp/ale'

" depends on vim-obsession
Plug 'dhruvasagar/vim-prosession'

call plug#end()


"
" COLOR SCHEME
"

if g:env =~ 'LINUX'
  " set Vim-specific sequences for RGB colors
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

set background=dark

let g:seoul256_background = 236

" darker background
let g:zenburn_high_Contrast = 1
" less visible line numbers
let g:zenburn_subdued_LineNr = 1
" increase contrast of visual selection
let g:zenburn_alternate_Visual = 1

" colorscheme solarized8_high
" colorscheme seoul256
colorscheme zenburn




syntax enable
"set spell spelllang=en_us
"set spell spelllang=de

"set t_Co=256
set number
set hlsearch
set tabstop=2
set shiftwidth=2
set expandtab
set autoindent
set hidden
set autowrite
set splitbelow
set splitright
set noswapfile

filetype plugin on

let g:UltiSnipsExpandTrigger="<tab>"

" vim-rooter
" Don't message me about change
let g:rooter_silent_chdir = 1

autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

" vim-prosession
" Session per branch
let g:prosession_per_branch = 1

let mapleader=','
"inoremap jk <esc>

" Jump back and forth between last two used buffers
nnoremap <leader><leader> :b#<cr>

" Files, already checked in into git, won't find new files
" output of 'git ls-files'
nnoremap <leader>. :GFiles<cr>

" Files I currently work on (output of 'git status')
" n -> 'new'
nnoremap <leader>n :GFiles?<cr>

nnoremap <leader>- :Files<cr>
nnoremap <leader>e :Explore<cr>
nnoremap <leader><space> :Buffers<cr>
nnoremap <leader>m :Rg<space>

nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" Tab through all buffers
nnoremap <Tab> :bnext<cr>
nnoremap <S-Tab> :bprevious<cr>

" Search in files in current file's folder
nnoremap <silent> <Leader>pf :Files %:p:h<CR>

" * = search for word under cursor inside current file
" Search for word under cursor across files
nnoremap <silent> <Leader>s :Rg <C-R><C-W><CR>

nnoremap <Space> @q


vnoremap <C-r> "hy:%s/<C-r>h//g<left><left>

nnoremap <silent> <F11> :YRShow<CR>

let g:yankring_window_use_horiz = 0
let g:yankring_window_width = 50


"let g:ale_linters={
"\   'javascript': ['eslint']
"\}

"let g:ale_fixers={
"\   'javascript': ['prettier'],
"\   'css': ['prettier'],
"\}

"let g:ale_linters_explicit=1
"let g:ale_fix_on_save=1

"command! -nargs=0 Prettier :call CocAction('runCommand', 'prettier.formatFile')


"
" PROJECT SPECIFIC SETTINGS
"

" - use .vim/plugin/projects.vim
"   (projects.vim is gitignored to prevent leakage of sensitive data)

